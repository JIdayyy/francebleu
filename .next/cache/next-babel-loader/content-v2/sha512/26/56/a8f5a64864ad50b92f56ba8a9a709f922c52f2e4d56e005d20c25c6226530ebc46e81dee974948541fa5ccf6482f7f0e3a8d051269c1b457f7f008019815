{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jidayyy/francebleu/src/State/AppState.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport tracks from \"../datas\";\nvar AppContextDefault = {\n  isPlaying: false,\n  isLoading: false,\n  tracks: tracks,\n  volume: 0.5,\n  setIsLoading: null,\n  index: 0,\n  onListen: tracks[0].url,\n  trackCount: null,\n  setOnListen: null,\n  setVolume: null,\n  setIndex: null,\n  setIsPlaying: null,\n  setDuration: null,\n  setCurrentTime: null,\n  setTrackCount: null,\n  duration: 0,\n  currentTime: 0\n};\nvar AppState = /*#__PURE__*/createContext(AppContextDefault);\n_c = AppState;\nexport function useAppContext() {\n  _s();\n\n  return useContext(AppState);\n}\n\n_s(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AppContextWrapper(_ref) {\n  _s2();\n\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(0),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var _useState3 = useState(tracks[index].url),\n      onListen = _useState3[0],\n      setOnListen = _useState3[1];\n\n  var _useState4 = useState(false),\n      isPlaying = _useState4[0],\n      setIsPlaying = _useState4[1];\n\n  var _useState5 = useState(0),\n      duration = _useState5[0],\n      setDuration = _useState5[1];\n\n  var _useState6 = useState(0),\n      currentTime = _useState6[0],\n      setCurrentTime = _useState6[1];\n\n  var _useState7 = useState(0.5),\n      volume = _useState7[0],\n      setVolume = _useState7[1];\n\n  var _useState8 = useState([]),\n      trackCount = _useState8[0],\n      setTrackCount = _useState8[1];\n\n  var _useState9 = useState(0),\n      count = _useState9[0],\n      setCount = _useState9[1];\n\n  return /*#__PURE__*/_jsxDEV(AppState.Provider, {\n    value: {\n      tracks: tracks,\n      isPlaying: isPlaying,\n      trackCount: trackCount,\n      setTrackCount: setTrackCount,\n      setIsPlaying: setIsPlaying,\n      isLoading: isLoading,\n      setIsLoading: setIsLoading,\n      setOnListen: setOnListen,\n      volume: volume,\n      setVolume: setVolume,\n      onListen: onListen,\n      index: index,\n      setIndex: setIndex,\n      setDuration: setDuration,\n      setCurrentTime: setCurrentTime,\n      duration: duration,\n      currentTime: currentTime\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AppContextWrapper, \"8AUQi11753ey9StSAqKS2hNr0MQ=\");\n\n_c2 = AppContextWrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppState\");\n$RefreshReg$(_c2, \"AppContextWrapper\");","map":{"version":3,"sources":["/home/jidayyy/francebleu/src/State/AppState.tsx"],"names":["React","createContext","useContext","useState","tracks","AppContextDefault","isPlaying","isLoading","volume","setIsLoading","index","onListen","url","trackCount","setOnListen","setVolume","setIndex","setIsPlaying","setDuration","setCurrentTime","setTrackCount","duration","currentTime","AppState","useAppContext","AppContextWrapper","children","count","setCount"],"mappings":"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","sourcesContent":["import React, {\n    createContext,\n    Dispatch,\n    SetStateAction,\n    useContext,\n    useEffect,\n    useState,\n} from \"react\";\nimport tracks from \"../datas\";\ninterface Track {\n    id: number;\n    name: string;\n    description: string;\n    url: string;\n}\ninterface TrackC {\n    id: number;\n    name: string;\n    description: string;\n    url: string;\n    count: number;\n}\n\nexport interface AppState {\n    setIsLoading: Dispatch<SetStateAction<boolean>> | null;\n    isLoading: boolean;\n    tracks: Track[];\n    onListen: string;\n    setOnListen: Dispatch<SetStateAction<string>>;\n    index: number;\n    setIndex: Dispatch<SetStateAction<number>>;\n    setIsPlaying: Dispatch<SetStateAction<boolean>>;\n    isPlaying: boolean;\n    duration: number;\n    currentTime: number;\n    setDuration: Dispatch<SetStateAction<number>>;\n    setVolume: Dispatch<SetStateAction<number>>;\n    setCurrentTime: Dispatch<SetStateAction<number>>;\n    setTrackCount: Dispatch<SetStateAction<[]>>;\n    trackCount: TrackC[] | null;\n    volume: number;\n    count: number;\n    setCount: Dispatch<SetStateAction<number>>;\n}\n\nconst AppContextDefault: AppState = {\n    isPlaying: false,\n    isLoading: false,\n    tracks: tracks,\n    volume: 0.5,\n    setIsLoading: null,\n    index: 0,\n    onListen: tracks[0].url,\n    trackCount: null,\n    setOnListen: null as unknown as Dispatch<SetStateAction<string>>,\n    setVolume: null as unknown as Dispatch<SetStateAction<number>>,\n    setIndex: null as unknown as Dispatch<SetStateAction<number>>,\n    setIsPlaying: null as unknown as Dispatch<SetStateAction<boolean>>,\n    setDuration: null as unknown as Dispatch<SetStateAction<number>>,\n    setCurrentTime: null as unknown as Dispatch<SetStateAction<number>>,\n    setTrackCount: null as unknown as Dispatch<SetStateAction<[]>>,\n    duration: 0,\n    currentTime: 0,\n};\n\nconst AppState = createContext<AppState>(AppContextDefault);\n\nexport function useAppContext(): AppState {\n    return useContext(AppState);\n}\nexport function AppContextWrapper({\n    children,\n}: {\n    children: React.ReactNode;\n}): JSX.Element {\n    const [isLoading, setIsLoading] = useState(false);\n    const [index, setIndex] = useState(0);\n    const [onListen, setOnListen] = useState(tracks[index].url);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [duration, setDuration] = useState(0);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [volume, setVolume] = useState(0.5);\n    const [trackCount, setTrackCount] = useState<[]>([]);\n    const [count, setCount] = useState<number>(0);\n\n    return (\n        <AppState.Provider\n            value={{\n                tracks,\n                isPlaying,\n                trackCount,\n                setTrackCount,\n                setIsPlaying,\n                isLoading,\n                setIsLoading,\n                setOnListen,\n                volume,\n                setVolume,\n                onListen,\n                index,\n                setIndex,\n                setDuration,\n                setCurrentTime,\n                duration,\n                currentTime,\n            }}\n        >\n            {children}\n        </AppState.Provider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}