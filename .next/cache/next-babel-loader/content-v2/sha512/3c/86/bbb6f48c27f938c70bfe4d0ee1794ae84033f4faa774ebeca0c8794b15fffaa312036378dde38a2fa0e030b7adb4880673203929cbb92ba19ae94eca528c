{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jidayyy/francebleu/src/State/AppState.tsx\";\nimport { createContext, useContext, useState } from \"react\";\nimport tracks from \"../datas\";\nconst AppContextDefault = {\n  isPlaying: false,\n  isLoading: false,\n  tracks: tracks,\n  setIsLoading: null,\n  index: 0,\n  onListen: tracks[0].url,\n  setOnListen: null,\n  setIndex: null,\n  setIsPlaying: null,\n  duration: 0,\n  currentTime: 0\n};\nconst AppState = /*#__PURE__*/createContext(AppContextDefault);\nexport function useAppContext() {\n  return useContext(AppState);\n}\nexport function AppContextWrapper({\n  children\n}) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: index,\n    1: setIndex\n  } = useState(0);\n  const {\n    0: onListen,\n    1: setOnListen\n  } = useState(tracks[index].url);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  return /*#__PURE__*/_jsxDEV(AppState.Provider, {\n    value: {\n      tracks,\n      isPlaying,\n      setIsPlaying,\n      isLoading,\n      setIsLoading,\n      setOnListen,\n      onListen,\n      index,\n      setIndex,\n      duration,\n      currentTime\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/jidayyy/francebleu/src/State/AppState.tsx"],"names":["createContext","useContext","useState","tracks","AppContextDefault","isPlaying","isLoading","setIsLoading","index","onListen","url","setOnListen","setIndex","setIsPlaying","duration","currentTime","AppState","useAppContext","AppContextWrapper","children"],"mappings":";;AAAA,SACIA,aADJ,EAIIC,UAJJ,EAKIC,QALJ,QAMO,OANP;AAOA,OAAOC,MAAP,MAAmB,UAAnB;AAsBA,MAAMC,iBAA2B,GAAG;AAChCC,EAAAA,SAAS,EAAE,KADqB;AAEhCC,EAAAA,SAAS,EAAE,KAFqB;AAGhCH,EAAAA,MAAM,EAAEA,MAHwB;AAIhCI,EAAAA,YAAY,EAAE,IAJkB;AAKhCC,EAAAA,KAAK,EAAE,CALyB;AAMhCC,EAAAA,QAAQ,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAUO,GANY;AAOhCC,EAAAA,WAAW,EAAE,IAPmB;AAQhCC,EAAAA,QAAQ,EAAE,IARsB;AAShCC,EAAAA,YAAY,EAAE,IATkB;AAUhCC,EAAAA,QAAQ,EAAE,CAVsB;AAWhCC,EAAAA,WAAW,EAAE;AAXmB,CAApC;AAcA,MAAMC,QAAQ,gBAAGhB,aAAa,CAAWI,iBAAX,CAA9B;AAEA,OAAO,SAASa,aAAT,GAAmC;AACtC,SAAOhB,UAAU,CAACe,QAAD,CAAjB;AACH;AACD,OAAO,SAASE,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAA6D;AAChE,QAAM;AAAA,OAACb,SAAD;AAAA,OAAYC;AAAZ,MAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACM,KAAD;AAAA,OAAQI;AAAR,MAAoBV,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,QAAD;AAAA,OAAWE;AAAX,MAA0BT,QAAQ,CAACC,MAAM,CAACK,KAAD,CAAN,CAAcE,GAAf,CAAxC;AACA,QAAM;AAAA,OAACL,SAAD;AAAA,OAAYQ;AAAZ,MAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,sBACI,QAAC,QAAD,CAAU,QAAV;AACI,IAAA,KAAK,EAAE;AACHC,MAAAA,MADG;AAEHE,MAAAA,SAFG;AAGHQ,MAAAA,YAHG;AAIHP,MAAAA,SAJG;AAKHC,MAAAA,YALG;AAMHI,MAAAA,WANG;AAOHF,MAAAA,QAPG;AAQHD,MAAAA,KARG;AASHI,MAAAA,QATG;AAUHE,MAAAA,QAVG;AAWHC,MAAAA;AAXG,KADX;AAAA,cAeKI;AAfL;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH","sourcesContent":["import {\n    createContext,\n    Dispatch,\n    SetStateAction,\n    useContext,\n    useState,\n} from \"react\";\nimport tracks from \"../datas\";\ninterface Track {\n    id: number;\n    name: string;\n    description: string;\n    url: string;\n}\n\nexport interface AppState {\n    setIsLoading: Dispatch<SetStateAction<boolean>> | null;\n    isLoading: boolean;\n    tracks: Track[];\n    onListen: string;\n    setOnListen: Dispatch<SetStateAction<string>>;\n    index: number;\n    setIndex: Dispatch<SetStateAction<number>>;\n    setIsPlaying: Dispatch<SetStateAction<boolean>>;\n    isPlaying: boolean;\n    duration: number;\n    currentTime: number;\n}\n\nconst AppContextDefault: AppState = {\n    isPlaying: false,\n    isLoading: false,\n    tracks: tracks,\n    setIsLoading: null,\n    index: 0,\n    onListen: tracks[0].url,\n    setOnListen: null as unknown as Dispatch<SetStateAction<string>>,\n    setIndex: null as unknown as Dispatch<SetStateAction<number>>,\n    setIsPlaying: null as unknown as Dispatch<SetStateAction<boolean>>,\n    duration: 0,\n    currentTime: 0,\n};\n\nconst AppState = createContext<AppState>(AppContextDefault);\n\nexport function useAppContext(): AppState {\n    return useContext(AppState);\n}\nexport function AppContextWrapper({ children }: Props): JSX.Element {\n    const [isLoading, setIsLoading] = useState(false);\n    const [index, setIndex] = useState(0);\n    const [onListen, setOnListen] = useState(tracks[index].url);\n    const [isPlaying, setIsPlaying] = useState(false);\n    return (\n        <AppState.Provider\n            value={{\n                tracks,\n                isPlaying,\n                setIsPlaying,\n                isLoading,\n                setIsLoading,\n                setOnListen,\n                onListen,\n                index,\n                setIndex,\n                duration,\n                currentTime,\n            }}\n        >\n            {children}\n        </AppState.Provider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}