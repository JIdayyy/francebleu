{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jidayyy/francebleu/src/State/AppState.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nvar AppContextDefault = {\n  isPlaying: false,\n  isLoading: false,\n  tracks: [],\n  volume: 0.5,\n  setIsLoading: null,\n  index: 0,\n  onListen: \"\",\n  setOnListen: null,\n  setVolume: null,\n  setIndex: null,\n  setIsPlaying: null,\n  setDuration: null,\n  setCurrentTime: null,\n  duration: 0,\n  currentTime: 0\n};\nvar AppState = /*#__PURE__*/createContext(AppContextDefault);\n_c = AppState;\nexport function useAppContext() {\n  _s();\n\n  return useContext(AppState);\n}\n\n_s(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AppContextWrapper(_ref) {\n  _s2();\n\n  var children = _ref.children;\n\n  var _useQuery = useQuery(\"getCount\", function () {\n    return axios.get(process.env.NEXT_PUBLIC_API_URL).then(function (r) {\n      return r.data;\n    });\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  var _useState = useState([]),\n      tracks = _useState[0],\n      setTracks = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(0),\n      index = _useState3[0],\n      setIndex = _useState3[1];\n\n  var _useState4 = useState(tracks[index].url),\n      onListen = _useState4[0],\n      setOnListen = _useState4[1];\n\n  var _useState5 = useState(false),\n      isPlaying = _useState5[0],\n      setIsPlaying = _useState5[1];\n\n  var _useState6 = useState(0),\n      duration = _useState6[0],\n      setDuration = _useState6[1];\n\n  var _useState7 = useState(0),\n      currentTime = _useState7[0],\n      setCurrentTime = _useState7[1];\n\n  var _useState8 = useState(0.5),\n      volume = _useState8[0],\n      setVolume = _useState8[1];\n\n  useEffect(function () {});\n  return /*#__PURE__*/_jsxDEV(AppState.Provider, {\n    value: {\n      tracks: tracks,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      isLoading: isLoading,\n      setIsLoading: setIsLoading,\n      setOnListen: setOnListen,\n      volume: volume,\n      setVolume: setVolume,\n      onListen: onListen,\n      index: index,\n      setIndex: setIndex,\n      setDuration: setDuration,\n      setCurrentTime: setCurrentTime,\n      duration: duration,\n      currentTime: currentTime\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AppContextWrapper, \"DabeJcvpVDKB+mawDd3gFoyVjpU=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = AppContextWrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppState\");\n$RefreshReg$(_c2, \"AppContextWrapper\");","map":{"version":3,"sources":["/home/jidayyy/francebleu/src/State/AppState.tsx"],"names":["axios","React","createContext","useContext","useState","useQuery","AppContextDefault","isPlaying","isLoading","tracks","volume","setIsLoading","index","onListen","setOnListen","setVolume","setIndex","setIsPlaying","setDuration","setCurrentTime","duration","currentTime","AppState","useAppContext","AppContextWrapper","children","get","process","env","NEXT_PUBLIC_API_URL","then","r","data","error","setTracks","url","useEffect"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, {\n    createContext,\n    Dispatch,\n    SetStateAction,\n    useContext,\n    useState,\n} from \"react\";\nimport { useQuery } from \"react-query\";\n\ninterface Track {\n    id: number;\n    name: string;\n    description: string;\n    url: string;\n}\n\nexport interface AppState {\n    setIsLoading: Dispatch<SetStateAction<boolean>> | null;\n    isLoading: boolean;\n    tracks: Track[];\n    onListen: string;\n    setOnListen: Dispatch<SetStateAction<string>>;\n    index: number;\n    setIndex: Dispatch<SetStateAction<number>>;\n    setIsPlaying: Dispatch<SetStateAction<boolean>>;\n    isPlaying: boolean;\n    duration: number;\n    currentTime: number;\n    setDuration: Dispatch<SetStateAction<number>>;\n    setVolume: Dispatch<SetStateAction<number>>;\n    setCurrentTime: Dispatch<SetStateAction<number>>;\n    volume: number;\n}\n\nconst AppContextDefault: AppState = {\n    isPlaying: false,\n    isLoading: false,\n    tracks: [],\n    volume: 0.5,\n    setIsLoading: null,\n    index: 0,\n    onListen: \"\",\n    setOnListen: null as unknown as Dispatch<SetStateAction<string>>,\n    setVolume: null as unknown as Dispatch<SetStateAction<number>>,\n    setIndex: null as unknown as Dispatch<SetStateAction<number>>,\n    setIsPlaying: null as unknown as Dispatch<SetStateAction<boolean>>,\n    setDuration: null as unknown as Dispatch<SetStateAction<number>>,\n    setCurrentTime: null as unknown as Dispatch<SetStateAction<number>>,\n    duration: 0,\n    currentTime: 0,\n};\n\nconst AppState = createContext<AppState>(AppContextDefault);\n\nexport function useAppContext(): AppState {\n    return useContext(AppState);\n}\nexport function AppContextWrapper({\n    children,\n}: {\n    children: React.ReactNode;\n}): JSX.Element {\n    const { data, error } = useQuery(\"getCount\", () =>\n        axios\n            .get(process.env.NEXT_PUBLIC_API_URL as string)\n            .then((r) => r.data),\n    );\n    const [tracks, setTracks] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [index, setIndex] = useState(0);\n    const [onListen, setOnListen] = useState(tracks[index].url);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [duration, setDuration] = useState(0);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [volume, setVolume] = useState(0.5);\n    useEffect(() => {});\n    return (\n        <AppState.Provider\n            value={{\n                tracks,\n                isPlaying,\n                setIsPlaying,\n                isLoading,\n                setIsLoading,\n                setOnListen,\n                volume,\n                setVolume,\n                onListen,\n                index,\n                setIndex,\n                setDuration,\n                setCurrentTime,\n                duration,\n                currentTime,\n            }}\n        >\n            {children}\n        </AppState.Provider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}